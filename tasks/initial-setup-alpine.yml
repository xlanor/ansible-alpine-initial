### Initial Setup ###
# Alpine

# Assumes that: Alpine SSH login with password for root allowed
- name: KICKSTART - Alpine.
  block:
  - name: Ensure that sudo is installed.
    apk:
      name: sudo
      state: present

  ### SUDOERS ###
  - name: Ensure group "{{ iserver_user }}" exists
    group:
      name: "{{ iserver_user }}"
      state: present

  - name: Ensure that the default user "{{ iserver_user }}" exists
    user:
      name: "{{ iserver_user }}"
      group: "{{ iserver_user }}"
      password: '*'

  - name: Add the default user with passwordless sudo to sodoers.d
    template:
      src: sudo-default-user.j2
      dest: /etc/sudoers.d/default-user
      mode: 0440

  ## End of block KICKSTART
  become: true
  become_method: "{{ iserver_kickstart_become }}"
  tags:
    - vanilla

## Now that the default user can do passwordless sudo, run the rest with sudo.
- name: MAIN
  block:
  - name: Reset SSH connection to allow user changes to affect 'current login user'.
    meta: reset_connection
    tags:
      - vanilla

  ### BASE PACKAGES ###
  - name: Base Packages.
    import_tasks: packages-alpine.yml

  ### NETWORKING ###
  - name: Create a blank /etc/issue, if it does not exist.
    file:
      path: /etc/issue
      state: touch
      modification_time: preserve
      access_time: preserve

  - name: Copy original /etc/issue (once).
    command: cp /etc/issue /etc/issue.original
    args:
      creates: /etc/issue.original

  - name: Set hostname.
    hostname:
      name: "{{ iserver_hostname }}"
    register: apply_network_config
    tags:
      - vanilla

  - name: Networking.
    import_tasks: networking-alpine.yml

  - name: Copy original hosts file to back it up (once).
    command: cp /etc/hosts /etc/hosts.original
    args:
      creates: /etc/hosts.original
    tags:
      - vanilla

  - name: Create new hosts file.
    template:
      src: hosts.j2
      dest: /etc/hosts
    register: apply_network_config
    tags:
      - vanilla
      - travis

  - name: Apply network configuration changes.
    service:
      name: networking
      state: restarted
    when: apply_network_config is changed
    tags:
      - vanilla
      - travis

  ### SSH ###
  - name: Ensure that sshd is enabled and started.
    service:
      name: sshd
      enabled: yes
      state: started

  - name: Ensure that the default user has a SSH authorized key.
    authorized_key:
      user: "{{ iserver_user }}"
      state: present
      key: "{{ iserver_sshkey }}"
    tags:
      - vanilla

  #'UseDNS no' avoids login delays when the remote client's DNS cannot be resolved
  - name: Apply SSHD configuration.
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: '^#?\s*{{ item.key }}\s'
      line:   '{{ item.key }} {{ item.value }}'
      validate: '/usr/sbin/sshd -t -f %s'
    with_items:
    - key:   "PermitRootLogin"
      value: "no"
    - key:   "PasswordAuthentication"
      value: "no"
    - key:   "ChallengeResponseAuthentication"
      value: "no"
    - key:   "UsePAM"
      value: "yes"
    - key:   "UseDNS"
      value: "no"
    - key:   "Banner"
      value: "{{ iserver_ssh_banner }}"
    - key:   "Port"
      value: "{{ iserver_ssh_port }}"
    notify: Restart SSHD
    tags:
      - vanilla

  - name: Add a warning banner, shown before SSH login.
    copy:
      src: issue.net
      dest: "{{ iserver_ssh_banner }}"
    when: iserver_ssh_banner != "none"

  - name: New SSH host keys on first boot.
    import_tasks: ssh-host-keygen-alpine.yml
    # only run when is_template tag is specifically requested
    tags:
      - never
      - is_template

  ### CUSTOMIZE ###
  - name: Timezone.
    import_tasks: timezone-alpine.yml
    tags:
      - vanilla

  - name: Customize.
    import_tasks: customize-alpine.yml

  ## CLOUD ###
  - name: Serial Console.
    import_tasks: serialconsole-alpine.yml
    tags:
      - vanilla
      - travis

  # GROW PARTITION
  - name: Grow Partion Automatically.
    import_tasks: growpartition-alpine.yml

  ### CLEANUP ###
  - name: Cleanup.
    import_tasks: cleanup-alpine.yml
    # only run when is_template tag is specifically requested
    tags:
      - never
      - is_template

  - name: Lock root account to prevent logins for root from console.
    user:
      name: root
      # or use '*'
      password: '!'
    when: iserver_lock_root
    tags:
      - vanilla

  ## End of block MAIN
  become: true
